require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ServiceRequestsController, type: :controller do

  let(:client) { create(:user, role: 'client') }
  let(:service) {create(:service)}

  before do
    sign_in client
  end

  # This should return the minimal set of attributes required to create a valid
  # ServiceRequest. As you add validations to ServiceRequest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: 'fix my computer',
      description: 'my computer does not work',
      client_id: client.id,
      status: 'open',
      service_id: service.id
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      description: 'my computer does not work',
      client_id: client.id,
      status: 'open',
      service_id: service.id
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ServiceRequestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #my_requests" do
    it "returns a success response" do
      ServiceRequest.create! valid_attributes
      get :my_requests, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it "returns a AccessDenied error" do
      sign_out client
      expect{
        get :my_requests, params: {}, session: valid_session
      }.to raise_error(CanCan::AccessDenied)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      service_request = ServiceRequest.create! valid_attributes
      get :show, params: {id: service_request.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end

    it 'returns AccessDenied error' do
      sign_out client
      expect{
        get :new, params: {}, session: valid_session
      }.to raise_error(CanCan::AccessDenied)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      service_request = ServiceRequest.create! valid_attributes
      get :edit, params: {id: service_request.to_param}, session: valid_session
      expect(response).to be_successful
    end

    it 'returns AccessDenied error' do
      sign_out client
      expect{
        get :new, params: {}, session: valid_session
      }.to raise_error(CanCan::AccessDenied)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new ServiceRequest" do
        expect {
          post :create, params: {service_request: valid_attributes}, session: valid_session
        }.to change(ServiceRequest, :count).by(1)
      end

      it "redirects to the created service_request" do
        post :create, params: {service_request: valid_attributes}, session: valid_session
        expect(response).to redirect_to(ServiceRequest.last)
      end
    end

    context "with invalid params" do
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post :create, params: {service_request: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context 'with signed out user' do
      it 'returns AccessDenied error' do
        sign_out client
        expect{
          get :new, params: {}, session: valid_session
        }.to raise_error(CanCan::AccessDenied)
      end
    end
  end

  describe "PUT #update" do
    new_fields_for_update = {
      title: 'new title',
      description: 'new description',
    }
    let(:new_attributes) {
      new_fields_for_update
    }
    context "with valid params" do

      it "updates the requested service_request" do
        service_request = ServiceRequest.create! valid_attributes
        put :update, params: {id: service_request.to_param, service_request: new_attributes}, session: valid_session
        service_request.reload
        expect(service_request.title).to eq(new_fields_for_update[:title])
      end

      it "redirects to the service_request" do
        service_request = ServiceRequest.create! valid_attributes
        put :update, params: {id: service_request.to_param, service_request: new_attributes}, session: valid_session
        expect(response).to redirect_to(service_request)
      end
    end

    context "with invalid params" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        service_request = ServiceRequest.create! valid_attributes
        put :update, params: {id: service_request.to_param, service_request: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context 'with different user' do
      it 'returns AccessDenied error' do
        service_request = ServiceRequest.create! valid_attributes
        second_user = create(:user)
        sign_in second_user

        expect{
          put :update, params: {id: service_request.to_param, service_request: new_attributes}, session: valid_session
        }.to raise_error(CanCan::AccessDenied)
      end
    end
  end

  describe "DELETE #destroy" do
    context 'with authorized user' do
      it "destroys the requested service_request" do
        service_request = ServiceRequest.create! valid_attributes
        expect {
          delete :destroy, params: {id: service_request.to_param}, session: valid_session
        }.to change(ServiceRequest, :count).by(-1)
      end

      it "redirects to the service_requests list" do
        service_request = ServiceRequest.create! valid_attributes
        delete :destroy, params: {id: service_request.to_param}, session: valid_session
        expect(response).to redirect_to(service_requests_url)
      end
    end

    context 'with signed out user' do
      it 'returns AccessDenied error' do
        service_request = ServiceRequest.create! valid_attributes
        sign_out client

        expect {
          delete :destroy, params: {id: service_request.to_param}, session: valid_session
        }.to raise_error(CanCan::AccessDenied)
      end
    end

    context 'with different user' do
      it 'returns AccessDenied error' do
        service_request = ServiceRequest.create! valid_attributes
        second_user = create(:user)
        sign_in second_user
        
        expect{
          delete :destroy, params: {id: service_request.to_param}, session: valid_session
        }.to raise_error(CanCan::AccessDenied)
      end
    end

  end

end
